{
    "sourceFile": "static/js/portfolio.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751983441716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751983441716,
            "name": "Commit-0",
            "content": "// Portfolio JavaScript functionality\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // Preloader\r\n    window.addEventListener('load', function() {\r\n        setTimeout(function() {\r\n            const preloader = document.getElementById('preloader');\r\n            if (preloader) {\r\n                preloader.style.opacity = '0';\r\n                setTimeout(() => preloader.style.display = 'none', 500);\r\n            }\r\n        }, 1000);\r\n    });\r\n\r\n    // Initialize Vanta.js background if available\r\n    if (typeof VANTA !== 'undefined') {\r\n        VANTA.NET({\r\n            el: \"#vanta-background\",\r\n            color: 0x3b82f6,\r\n            backgroundColor: 0xf1f5f9,\r\n            points: 10,\r\n            maxDistance: 22,\r\n            spacing: 16,\r\n            showDots: false\r\n        });\r\n    }\r\n\r\n    // Dark mode toggle functionality\r\n    const toggle = document.getElementById('toggle');\r\n    const toggleMobile = document.getElementById('toggle-mobile');\r\n    const body = document.body;\r\n            \r\n    // Check for saved user preference\r\n    if (localStorage.getItem('dark-mode') === 'enabled') {\r\n        body.classList.add('dark');\r\n        if (toggle) toggle.checked = true;\r\n        if (toggleMobile) toggleMobile.checked = true;\r\n        \r\n        // Update Vanta.js background for dark mode\r\n        if (typeof VANTA !== 'undefined') {\r\n            VANTA.NET({\r\n                el: \"#vanta-background\",\r\n                color: 0x3b82f6,\r\n                backgroundColor: 0x0f172a,\r\n                points: 10,\r\n                maxDistance: 22,\r\n                spacing: 16,\r\n                showDots: false\r\n            });\r\n        }\r\n    }\r\n            \r\n    // Desktop toggle\r\n    if (toggle) {\r\n        toggle.addEventListener('change', function() {\r\n            if (this.checked) {\r\n                body.classList.add('dark');\r\n                localStorage.setItem('dark-mode', 'enabled');\r\n                if (toggleMobile) toggleMobile.checked = true;\r\n                \r\n                if (typeof VANTA !== 'undefined') {\r\n                    VANTA.NET({\r\n                        el: \"#vanta-background\",\r\n                        color: 0x3b82f6,\r\n                        backgroundColor: 0x0f172a,\r\n                        points: 10,\r\n                        maxDistance: 22,\r\n                        spacing: 16,\r\n                        showDots: false\r\n                    });\r\n                }\r\n            } else {\r\n                body.classList.remove('dark');\r\n                localStorage.setItem('dark-mode', 'disabled');\r\n                if (toggleMobile) toggleMobile.checked = false;\r\n                \r\n                if (typeof VANTA !== 'undefined') {\r\n                    VANTA.NET({\r\n                        el: \"#vanta-background\",\r\n                        color: 0x3b82f6,\r\n                        backgroundColor: 0xf1f5f9,\r\n                        points: 10,\r\n                        maxDistance: 22,\r\n                        spacing: 16,\r\n                        showDots: false\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n            \r\n    // Mobile toggle\r\n    if (toggleMobile) {\r\n        toggleMobile.addEventListener('change', function() {\r\n            if (this.checked) {\r\n                body.classList.add('dark');\r\n                localStorage.setItem('dark-mode', 'enabled');\r\n                if (toggle) toggle.checked = true;\r\n                \r\n                if (typeof VANTA !== 'undefined') {\r\n                    VANTA.NET({\r\n                        el: \"#vanta-background\",\r\n                        color: 0x3b82f6,\r\n                        backgroundColor: 0x0f172a,\r\n                        points: 10,\r\n                        maxDistance: 22,\r\n                        spacing: 16,\r\n                        showDots: false\r\n                    });\r\n                }\r\n            } else {\r\n                body.classList.remove('dark');\r\n                localStorage.setItem('dark-mode', 'disabled');\r\n                if (toggle) toggle.checked = false;\r\n                \r\n                if (typeof VANTA !== 'undefined') {\r\n                    VANTA.NET({\r\n                        el: \"#vanta-background\",\r\n                        color: 0x3b82f6,\r\n                        backgroundColor: 0xf1f5f9,\r\n                        points: 10,\r\n                        maxDistance: 22,\r\n                        spacing: 16,\r\n                        showDots: false\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n            \r\n    // Mobile menu functionality\r\n    const mobileMenuButton = document.getElementById('mobile-menu-button');\r\n    const mobileMenu = document.getElementById('mobile-menu');\r\n    const closeMenu = document.getElementById('close-menu');\r\n            \r\n    if (mobileMenuButton && mobileMenu) {\r\n        mobileMenuButton.addEventListener('click', function() {\r\n            mobileMenu.classList.remove('hidden');\r\n            mobileMenu.classList.add('flex');\r\n        });\r\n    }\r\n            \r\n    if (closeMenu && mobileMenu) {\r\n        closeMenu.addEventListener('click', function() {\r\n            mobileMenu.classList.add('hidden');\r\n            mobileMenu.classList.remove('flex');\r\n        });\r\n    }\r\n            \r\n    // Close menu when clicking on links\r\n    if (mobileMenu) {\r\n        const mobileLinks = mobileMenu.querySelectorAll('a');\r\n        mobileLinks.forEach(link => {\r\n            link.addEventListener('click', function() {\r\n                mobileMenu.classList.add('hidden');\r\n                mobileMenu.classList.remove('flex');\r\n            });\r\n        });\r\n    }\r\n            \r\n    // Create floating particles\r\n    const particlesContainer = document.querySelector('.particles');\r\n    if (particlesContainer) {\r\n        const particleCount = window.innerWidth < 768 ? 15 : 30;\r\n                    \r\n        for (let i = 0; i < particleCount; i++) {\r\n            const particle = document.createElement('div');\r\n            particle.classList.add('absolute', 'rounded-full', 'bg-blue-300', 'dark:bg-blue-600/30');\r\n                            \r\n            // Random size\r\n            const size = Math.random() * 6 + 2;\r\n            particle.style.width = `${size}px`;\r\n            particle.style.height = `${size}px`;\r\n                            \r\n            // Random position\r\n            particle.style.left = `${Math.random() * 100}%`;\r\n            particle.style.top = `${Math.random() * 100}%`;\r\n                            \r\n            // Random animation\r\n            const duration = Math.random() * 20 + 10;\r\n            particle.style.animation = `float ${duration}s ease-in-out infinite`;\r\n            particle.style.animationDelay = `${Math.random() * 5}s`;\r\n                            \r\n            particlesContainer.appendChild(particle);\r\n        }\r\n    }\r\n            \r\n    // Animate skill bars on scroll\r\n    window.addEventListener('scroll', function() {\r\n        const skillBars = document.querySelectorAll('.skill-progress');\r\n        const skillsSection = document.getElementById('skills');\r\n        \r\n        if (skillsSection) {\r\n            const sectionPosition = skillsSection.getBoundingClientRect().top;\r\n            const screenPosition = window.innerHeight / 1.3;\r\n                    \r\n            if (sectionPosition < screenPosition) {\r\n                skillBars.forEach(bar => {\r\n                    const width = bar.getAttribute('data-width') || bar.style.width;\r\n                    bar.style.width = '0';\r\n                    setTimeout(() => {\r\n                        bar.style.width = width;\r\n                    }, 100);\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    // Smooth scrolling for anchor links\r\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n        anchor.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n                            \r\n            const targetId = this.getAttribute('href');\r\n            const targetElement = document.querySelector(targetId);\r\n                            \r\n            if (targetElement) {\r\n                window.scrollTo({\r\n                    top: targetElement.offsetTop - 80,\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    // 3D Character Animation\r\n    const container = document.getElementById('character-container');\r\n    const canvas = document.getElementById('character-canvas');\r\n                    \r\n    if (canvas && container && typeof THREE !== 'undefined') {\r\n        // Set canvas size\r\n        canvas.width = container.clientWidth;\r\n        canvas.height = container.clientHeight;\r\n                        \r\n        // Scene setup\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(\r\n            75, \r\n             canvas.width / canvas.height, \r\n             0.1, \r\n             1000\r\n        );\r\n        camera.position.z = 5;\r\n                        \r\n        // Renderer\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas,\r\n            alpha: true,\r\n            antialias: true\r\n        });\r\n        renderer.setClearColor(0x000000, 0);\r\n        renderer.setSize(canvas.width, canvas.height);\r\n                        \r\n        // Simple character geometry\r\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n        const material = new THREE.MeshBasicMaterial({ \r\n             color: 0x3b82f6,\r\n            wireframe: true \r\n         });\r\n        const cube = new THREE.Mesh(geometry, material);\r\n        scene.add(cube);\r\n                        \r\n        // Add floating AI elements\r\n        const aiElements = [];\r\n        const aiGeometry = new THREE.SphereGeometry(0.1, 16, 16);\r\n        const aiMaterial = new THREE.MeshBasicMaterial({ \r\n             color: 0x10b981 \r\n         });\r\n                        \r\n        for (let i = 0; i < 5; i++) {\r\n            const aiElement = new THREE.Mesh(aiGeometry, aiMaterial);\r\n            aiElement.position.x = (Math.random() - 0.5) * 2;\r\n            aiElement.position.y = (Math.random() - 0.5) * 2;\r\n            aiElement.position.z = (Math.random() - 0.5) * 2;\r\n            scene.add(aiElement);\r\n            aiElements.push(aiElement);\r\n        }\r\n                        \r\n        // Animation loop\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n                            \r\n            // Rotate character\r\n            cube.rotation.x += 0.01;\r\n            cube.rotation.y += 0.01;\r\n                            \r\n            // Animate AI elements\r\n            aiElements.forEach((element, index) => {\r\n                element.position.x = Math.sin(Date.now() * 0.001 + index) * 1.5;\r\n                element.position.y = Math.cos(Date.now() * 0.001 + index * 2) * 1.5;\r\n                element.position.z = Math.sin(Date.now() * 0.001 + index * 0.5) * 1.5;\r\n            });\r\n                            \r\n            renderer.render(scene, camera);\r\n        }\r\n                        \r\n        animate();\r\n                        \r\n        // Cursor interaction\r\n        container.addEventListener('mousemove', (event) => {\r\n            const rect = container.getBoundingClientRect();\r\n            const x = ((event.clientX - rect.left) / container.clientWidth) * 2 - 1;\r\n            const y = -((event.clientY - rect.top) / container.clientHeight) * 2 + 1;\r\n                            \r\n            cube.rotation.y = x * 0.5;\r\n            cube.rotation.x = y * 0.5;\r\n                            \r\n            if (aiElements[0]) {\r\n                aiElements[0].position.x = x * 2;\r\n                aiElements[0].position.y = y * 2;\r\n            }\r\n        });\r\n                        \r\n        // Hover effect\r\n        container.addEventListener('mouseenter', () => {\r\n            cube.material.color.setHex(0x10b981);\r\n            cube.scale.set(1.1, 1.1, 1.1);\r\n        });\r\n                        \r\n        container.addEventListener('mouseleave', () => {\r\n            cube.material.color.setHex(0x3b82f6);\r\n            cube.scale.set(1, 1, 1);\r\n        });\r\n    }\r\n\r\n    // Terminal functionality\r\n    const terminalOutput = document.getElementById('terminalOutput');\r\n    const terminalInput = document.getElementById('terminalInput');\r\n    \r\n    if (terminalOutput && terminalInput) {\r\n        // Set current date and time\r\n        const now = new Date();\r\n        const options = { \r\n            weekday: 'short', \r\n            month: 'short', \r\n            day: 'numeric', \r\n            hour: '2-digit', \r\n            minute: '2-digit', \r\n            second: '2-digit', \r\n            timeZoneName: 'short' \r\n        };\r\n        const currentDateTimeElement = document.getElementById('currentDateTime');\r\n        if (currentDateTimeElement) {\r\n            currentDateTimeElement.textContent = now.toLocaleDateString('en-US', options);\r\n        }\r\n        \r\n        // Portfolio data for terminal commands\r\n        const portfolioData = {\r\n            about: [\r\n                \"Name: Musyoki Mutua\",\r\n                \"Title: Software Engineer\",\r\n                \"Specialization: AI for Healthcare\",\r\n                \"Location: Nairobi, Kenya\",\r\n                \"\",\r\n                \"Professional Summary:\",\r\n                \"Innovative Software Engineer specializing in AI product\",\r\n                \"development and machine learning. Successfully built AI-powered\",\r\n                \"products, fine-tuned LLMs for medical applications, and\",\r\n                \"implemented RAG pipelines for healthcare.\"\r\n            ],\r\n            skills: [\r\n                \"Core Competencies:\",\r\n                \"- Python (Expert)\",\r\n                \"- Machine Learning\",\r\n                \"- AI Product Development\",\r\n                \"- Natural Language Processing\",\r\n                \"\",\r\n                \"Technologies:\",\r\n                \"- TensorFlow, PyTorch\",\r\n                \"- AWS, Docker\",\r\n                \"- SQL, Cypher QL\",\r\n                \"- LLMs, Transformer Models\"\r\n            ],\r\n            projects: [\r\n                \"1. AI-Powered Healthcare SaaS\",\r\n                \"   - Built AI system for hospitals\",\r\n                \"   - Tech: LLMs, RAG, Python\",\r\n                \"\",\r\n                \"2. Brain Tumor Segmentation\",\r\n                \"   - UNet architecture implementation\",\r\n                \"   - Tech: TensorFlow, Medical Imaging\",\r\n                \"\",\r\n                \"3. NLP to SQL Conversion\",\r\n                \"   - Natural language to database queries\",\r\n                \"   - Tech: NLU, LLMs, Graph DBs\"\r\n            ],\r\n            contact: [\r\n                \"Email: mutua.musyoki@example.com\",\r\n                \"Phone: +254 700 000000\",\r\n                \"GitHub: github.com/musyokimutua\",\r\n                \"LinkedIn: linkedin.com/in/musyokimutua\",\r\n                \"\",\r\n                \"Available for:\",\r\n                \"- Full-time positions\",\r\n                \"- Consulting projects\",\r\n                \"- Research collaborations\"\r\n            ]\r\n        };\r\n        \r\n        // Help command information\r\n        const helpText = [\r\n            \"Available commands:\",\r\n            \"-------------------\",\r\n            \"about       - Display information about me\",\r\n            \"skills      - Show my technical skills and expertise\",\r\n            \"projects    - List some of my notable projects\",\r\n            \"contact     - Get in touch with me\",\r\n            \"clear       - Clear the terminal screen\",\r\n            \"help        - Show this help message\"\r\n        ];\r\n        \r\n        // Function to add text to terminal output\r\n        function addTerminalLine(text, className = '') {\r\n            const line = document.createElement('div');\r\n            if (className) line.className = className;\r\n            line.textContent = text;\r\n            terminalOutput.appendChild(line);\r\n            terminalOutput.scrollTop = terminalOutput.scrollHeight;\r\n        }\r\n        \r\n        // Function to process commands\r\n        function processCommand(command) {\r\n            addTerminalLine(command, 'command text-gray-300');\r\n            \r\n            const cmd = command.trim().toLowerCase();\r\n            \r\n            if (cmd === 'help') {\r\n                helpText.forEach(line => addTerminalLine(line));\r\n            } \r\n            else if (cmd === 'clear') {\r\n                terminalOutput.innerHTML = '';\r\n                // Re-add the initial messages\r\n                addTerminalLine('Welcome to my interactive terminal!', 'text-indigo-400');\r\n                addTerminalLine('Type \\'help\\' to see available commands.', '');\r\n                addTerminalLine('----------------------------------------------------------------------', 'text-gray-400 text-xs');\r\n                const currentDateTimeElement = document.getElementById('currentDateTime');\r\n                if (currentDateTimeElement) {\r\n                    addTerminalLine(`Last login: ${currentDateTimeElement.textContent} from 127.0.0.1`, 'text-green-400');\r\n                }\r\n            }\r\n            else if (cmd === 'about' || cmd === 'skills' || cmd === 'projects' || cmd === 'contact') {\r\n                portfolioData[cmd].forEach(line => addTerminalLine(line));\r\n            }\r\n            else if (cmd) {\r\n                addTerminalLine(`Command not found: ${cmd}. Type 'help' to see available commands.`, 'text-red-400');\r\n            }\r\n        }\r\n        \r\n        // Handle input\r\n        terminalInput.addEventListener('keydown', function(e) {\r\n            if (e.key === 'Enter') {\r\n                processCommand(terminalInput.value);\r\n                terminalInput.value = '';\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        \r\n        // Focus input on page load\r\n        terminalInput.focus();\r\n    }\r\n\r\n    // Responsive adjustments on resize\r\n    window.addEventListener('resize', function() {\r\n        const container = document.getElementById('character-container');\r\n        const canvas = document.getElementById('character-canvas');\r\n        if (canvas && container) {\r\n            canvas.width = container.clientWidth;\r\n            canvas.height = container.clientHeight;\r\n        }\r\n    });\r\n\r\n    // Custom Select Dropdown Functionality\r\n    const customSelect = document.getElementById('role-select');\r\n    const selectElement = document.getElementById('role');\r\n    const positionIcon = document.getElementById('position-icon');\r\n    \r\n    if (customSelect && selectElement && positionIcon) {\r\n        // Icon mapping for different position types\r\n        const iconMap = {\r\n            'full-time': 'fas fa-building',\r\n            'part-time': 'fas fa-clock',\r\n            'internship': 'fas fa-graduation-cap',\r\n            'contract': 'fas fa-handshake',\r\n            'freelance': 'fas fa-laptop-code'\r\n        };\r\n\r\n        // Handle focus state\r\n        selectElement.addEventListener('focus', function() {\r\n            customSelect.classList.add('focused');\r\n        });\r\n\r\n        selectElement.addEventListener('blur', function() {\r\n            customSelect.classList.remove('focused');\r\n        });\r\n\r\n        // Handle value change\r\n        selectElement.addEventListener('change', function() {\r\n            const selectedValue = this.value;\r\n            \r\n            if (selectedValue) {\r\n                customSelect.classList.add('has-value');\r\n                customSelect.setAttribute('data-position', selectedValue);\r\n                \r\n                // Update icon based on selection\r\n                if (iconMap[selectedValue]) {\r\n                    positionIcon.innerHTML = `<i class=\"${iconMap[selectedValue]}\"></i>`;\r\n                }\r\n            } else {\r\n                customSelect.classList.remove('has-value');\r\n                customSelect.removeAttribute('data-position');\r\n                positionIcon.innerHTML = '<i class=\"fas fa-briefcase\"></i>';\r\n            }\r\n        });\r\n\r\n        // Handle click on custom select container\r\n        customSelect.addEventListener('click', function(e) {\r\n            if (e.target !== selectElement) {\r\n                selectElement.focus();\r\n                selectElement.click();\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Enhanced form validation with visual feedback\r\n    const contactForm = document.getElementById('contact-form');\r\n    if (contactForm) {\r\n        const inputs = contactForm.querySelectorAll('input, select, textarea');\r\n        \r\n        inputs.forEach(input => {\r\n            // Add floating label effect\r\n            input.addEventListener('focus', function() {\r\n                this.parentElement.classList.add('focused');\r\n            });\r\n            \r\n            input.addEventListener('blur', function() {\r\n                if (!this.value) {\r\n                    this.parentElement.classList.remove('focused');\r\n                }\r\n            });\r\n            \r\n            // Real-time validation feedback\r\n            input.addEventListener('input', function() {\r\n                const isValid = this.checkValidity();\r\n                const parent = this.parentElement;\r\n                \r\n                if (isValid) {\r\n                    parent.classList.remove('error');\r\n                    parent.classList.add('valid');\r\n                } else {\r\n                    parent.classList.remove('valid');\r\n                    if (this.value.length > 0) {\r\n                        parent.classList.add('error');\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        // Form submission with enhanced UX\r\n        contactForm.addEventListener('submit', function(e) {\r\n            e.preventDefault();\r\n            \r\n            // Add loading state\r\n            const submitBtn = this.querySelector('button[type=\"submit\"]');\r\n            const originalText = submitBtn.innerHTML;\r\n            submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i>Sending...';\r\n            submitBtn.disabled = true;\r\n            \r\n            // Simulate form submission (replace with actual submission logic)\r\n            setTimeout(() => {\r\n                submitBtn.innerHTML = '<i class=\"fas fa-check mr-2\"></i>Message Sent!';\r\n                submitBtn.classList.add('success');\r\n                \r\n                setTimeout(() => {\r\n                    submitBtn.innerHTML = originalText;\r\n                    submitBtn.disabled = false;\r\n                    submitBtn.classList.remove('success');\r\n                    this.reset();\r\n                    \r\n                    // Reset custom select state\r\n                    if (customSelect) {\r\n                        customSelect.classList.remove('has-value');\r\n                        customSelect.removeAttribute('data-position');\r\n                        positionIcon.innerHTML = '<i class=\"fas fa-briefcase\"></i>';\r\n                    }\r\n                }, 2000);\r\n            }, 1500);\r\n        });\r\n    }\r\n    \r\n});\r\n"
        }
    ]
}