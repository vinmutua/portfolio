{
    "sourceFile": "static/js/terminal.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752054560076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752054560076,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', function() {\r\n    // Create matrix rain effect\r\n    function createMatrixRain() {\r\n        const chars = \"01アカサタナハマヤラワABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n        const container = document.getElementById('matrixContainer');\r\n        const width = container.offsetWidth;\r\n        \r\n        for (let i = 0; i < 20; i++) {\r\n            const matrixDrop = document.createElement('div');\r\n            matrixDrop.className = 'matrix-drop';\r\n            matrixDrop.style.left = Math.random() * width + 'px';\r\n            matrixDrop.style.animationDuration = Math.random() * 2 + 3 + 's';\r\n            matrixDrop.style.animationDelay = Math.random() * 5 + 's';\r\n            \r\n            let text = '';\r\n            const length = Math.floor(Math.random() * 15) + 10;\r\n            for (let j = 0; j < length; j++) {\r\n                text += chars.charAt(Math.floor(Math.random() * chars.length));\r\n            }\r\n            \r\n            matrixDrop.textContent = text;\r\n            container.appendChild(matrixDrop);\r\n        }\r\n    }\r\n    \r\n    // Set up date/time display\r\n    function updateDateTime() {\r\n        const now = new Date();\r\n        const options = { \r\n            weekday: 'short', \r\n            month: 'short', \r\n            day: 'numeric', \r\n            hour: '2-digit', \r\n            minute: '2-digit', \r\n            second: '2-digit',\r\n            hour12: false\r\n        };\r\n        document.getElementById('currentDateTime').textContent = now.toLocaleDateString('en-US', options);\r\n        document.getElementById('currentTime').textContent = now.toLocaleTimeString('en-US', {hour12: false});\r\n    }\r\n    \r\n    updateDateTime();\r\n    setInterval(updateDateTime, 1000);\r\n    \r\n    // Initialize terminal\r\n    const terminalOutput = document.getElementById('terminalOutput');\r\n    const terminalInput = document.getElementById('terminalInput');\r\n    let authAttempts = 0;\r\n    let accessGranted = true; // Set to false if you want to simulate login\r\n    \r\n    // Sample data for the portfolio with hacker twist\r\n    const portfolioData = {\r\n        about: [\r\n            \"[root@cyberterm]:$ User profile decrypted...\",\r\n            \"\",\r\n            \"> IDENT: ████████_SYSTEM_OPERATIVE\",\r\n            \"> CODENAME: <span class='text-cyan-300'>NE0</span>\",\r\n            \"> CLEARANCE: <span class='text-green-400'>LEVEL 5</span>\",\r\n            \"> SPECIALIZATION: <span class='text-yellow-300'>CYBER_SECURITY | FULL_STACK_DEV</span>\",\r\n            \"> LOCATION: ████████, ████████\",\r\n            \"\",\r\n            \"[BIO]:\",\r\n            \"> 01010100 01110010 01100001 01101001 01101110 01100101 01100100 \",\r\n            \"> 01101001 01101110 00100000 01110001 01110101 01100001 01101110 \",\r\n            \"> 01110100 01110101 01101101 00100000 01100011 01101111 01101101 \",\r\n            \"> 01110000 01110101 01110100 01101001 01101110 01100111 00101110 \",\r\n            \"\",\r\n            \"> ███████████ ████ ██ ████████ █████ ███████ █████\",\r\n            \"> ███ ███████ ███\",\r\n            \"\",\r\n            \"[END TRANSMISSION]\"\r\n        ],\r\n        skills: [\r\n            \"<span class='text-cyan-300'>[+] ACTIVE SKILLSET:</span>\",\r\n            \"\",\r\n            \">> <span class='text-green-400'>LANGUAGES:</span>\",\r\n            \"   - JavaScript/TypeScript [██████████]\",\r\n            \"   - Python [██████████]\",\r\n            \"   - C++/Java [██████]\",\r\n            \"   - Assembly [███]\",\r\n            \"\",\r\n            \">> <span class='text-green-400'>FRONTEND:</span>\",\r\n            \"   - React/Vue [████████]\",\r\n            \"   - Three.js/WebGL [██████]\",\r\n            \"   - WebAssembly [████]\",\r\n            \"\",\r\n            \">> <span class='text-green-400'>BACKEND:</span>\",\r\n            \"   - Node.js/Deno [█████████]\",\r\n            \"   - Rust/Go [██████]\",\r\n            \"\",\r\n            \">> <span class='text-green-400'>CYBER:</span>\",\r\n            \"   - Penetration Testing [████████]\",\r\n            \"   - Cryptography [███████]\",\r\n            \"   - Reverse Engineering [█████]\",\r\n            \"\",\r\n            \">> <span class='text-green-400'>OTHER:</span>\",\r\n            \"   - Machine Learning [██████]\",\r\n            \"   - Blockchain [█████]\",\r\n            \"   - Quantum Computing [██]\",\r\n            \"\",\r\n            \"<span class='text-gray-400'>// More data available with higher clearance</span>\"\r\n        ],\r\n        projects: [\r\n            \"<span class='text-cyan-300'>[+] OPERATIONAL HISTORY:</span>\",\r\n            \"\",\r\n            \"1. <span class='text-yellow-300'>CYBER_PENTEST_FRAMEWORK</span> [CLASSIFIED]\",\r\n            \"   - Built with: Python, C++, Assembly\",\r\n            \"   - Status: <span class='text-green-400'>ACTIVE</span>\",\r\n            \"   - Clearance required: <span class='text-red-400'>LEVEL 4+</span>\",\r\n            \"\",\r\n            \"2. <span class='text-yellow-300'>QUANTUM_ENCRYPTION_PROTOCOL</span> [REDACTED]\",\r\n            \"   - Built with: Q#, Python, Rust\",\r\n            \"   - Status: <span class='text-green-400'>ACTIVE</span>\",\r\n            \"   - Clearance required: <span class='text-red-400'>LEVEL 5+</span>\",\r\n            \"\",\r\n            \"3. <span class='text-yellow-300'>NEURAL_INTERFACE</span> [EXPUNGED]\",\r\n            \"   - Built with: TensorFlow, PyTorch, Cuda\",\r\n            \"   - Status: <span class='text-yellow-300'>CLASSIFIED</span>\",\r\n            \"   - Clearance required: <span class='text-red-400'>LEVEL 6+</span>\",\r\n            \"\",\r\n            \"<span class='text-gray-400'>// Contact for more information (clearance verification required)</span>\"\r\n        ],\r\n        contact: [\r\n            \"<span class='text-cyan-300'>[+] SECURE COMMUNICATION CHANNELS:</span>\",\r\n            \"\",\r\n            \"> <span class='text-green-400'>ENCRYPTED MESSAGE:</span>\",\r\n            \"   [Base64]: QmFnZ2FnZWVzIGFyZSBnb29kIHN0dWRlbnRz\",\r\n            \"   [SHA256]: 32d10c7b8...\",\r\n            \"\",\r\n            \"> <span class='text-green-400'>PREFERRED CONTACT:</span>\",\r\n            \"   - Keybase: <span class='text-cyan-300'>@yourusername</span>\",\r\n            \"   - SecureDrop: <span class='text-cyan-300'>[REDACTED]</span>\",\r\n            \"   - PGP: <span class='text-cyan-300'>0xDEADBEEF</span>\",\r\n            \"\",\r\n            \"<span class='text-yellow-300'>// Standard channels not recommended for sensitive data</span>\",\r\n            \"\",\r\n            \"> <span class='text-green-400'>STANDARD CONTACT:</span>\",\r\n            \"   - Email: your.email@example.com\",\r\n            \"   - GitHub: github.com/yourusername\",\r\n            \"   - LinkedIn: linkedin.com/in/yourprofile\",\r\n            \"\",\r\n            \"<span class='text-gray-400'>[END OF LINE]</span>\"\r\n        ],\r\n        system: [\r\n            \"<span class='text-cyan-300'>[+] SYSTEM DIAGNOSTICS:</span>\",\r\n            \"\",\r\n            \"> MEMORY: 78% <span class='text-yellow-300'>████████░░░░</span>\",\r\n            \"> CPU: 43% <span class='text-green-400'>████░░░░░░░░</span>\",\r\n            \"> NETWORK: 62% <span class='text-yellow-300'>██████░░░░░░</span>\",\r\n            \"> ENCRYPTION: AES-256 <span class='text-green-400'>[ACTIVE]</span>\",\r\n            \"> VPN: TOR Network <span class='text-green-400'>[ACTIVE]</span>\",\r\n            \"> FIREWALL: STATE: <span class='text-green-400'>SECURE</span>\",\r\n            \"\",\r\n            \"> THREATS DETECTED: 0\",\r\n            \"> INTRUSIONS BLOCKED: 12\",\r\n            \"> DATA BREACHES: 0\",\r\n            \"\",\r\n            \"<span class='text-green-400'>SYSTEM STATUS: NOMINAL</span>\"\r\n        ],\r\n        secret: [\r\n            \"<span class='text-cyan-300'>[!] UNAUTHORIZED ACCESS DETECTED [!]</span>\",\r\n            \"\",\r\n            \"> Initiating countermeasures...\",\r\n            \"> Trace route activated...\",\r\n            \"> Sending alert to central...\",\r\n            \"\",\r\n            \"<span class='text-red-400'>> WARNING: UNAUTHORIZED ACCESS ATTEMPT LOGGED</span>\",\r\n            \"\",\r\n            \"<span class='text-gray-400'>You shouldn't be here...</span>\"\r\n        ]\r\n    };\r\n    \r\n    // Help command information\r\n    const helpText = [\r\n        \"<span class='text-cyan-300'>[+] AVAILABLE COMMANDS:</span>\",\r\n        \"\",\r\n        \"> <span class='text-green-400'>about</span>       - ████████ profile\",\r\n        \"> <span class='text-green-400'>skills</span>      - Display operative skill set\",\r\n        \"> <span class='text-green-400'>projects</span>    - Access mission logs\",\r\n        \"> <span class='text-green-400'>contact</span>     - Open secure communication channels\",\r\n        \"> <span class='text-green-400'>system</span>      - Run system diagnostics\",\r\n        \"> <span class='text-green-400'>clear</span>       - Purge terminal history\",\r\n        \"> <span class='text-green-400'>help</span>        - Show command list\",\r\n        \"\",\r\n        \"<span class='text-gray-400'>Type <span class='text-cyan-300'>'sudo'</span> for advanced options (clearance required)</span>\"\r\n    ];\r\n    \r\n    // Function to add text to terminal output with optional delay\r\n    function addTerminalLine(text, className = '', delay = 0) {\r\n        setTimeout(() => {\r\n            const line = document.createElement('div');\r\n            if (className) line.className = className;\r\n            line.innerHTML = text;\r\n            terminalOutput.appendChild(line);\r\n            terminalOutput.scrollTop = terminalOutput.scrollHeight;\r\n        }, delay);\r\n    }\r\n    \r\n    // Function to simulate loading animation\r\n    function simulateLoading(duration, callback) {\r\n        let dots = 0;\r\n        const interval = setInterval(() => {\r\n            dots = (dots + 1) % 4;\r\n            const loadingText = document.createElement('div');\r\n            loadingText.className = 'text-yellow-300';\r\n            loadingText.textContent = `Accessing secure database${'.'.repeat(dots)}`;\r\n            \r\n            // Remove previous loading message if it exists\r\n            const prevLoading = terminalOutput.querySelector('.loading-message');\r\n            if (prevLoading) terminalOutput.removeChild(prevLoading);\r\n            \r\n            loadingText.classList.add('loading-message');\r\n            terminalOutput.appendChild(loadingText);\r\n            terminalOutput.scrollTop = terminalOutput.scrollHeight;\r\n        }, 300);\r\n        \r\n        setTimeout(() => {\r\n            clearInterval(interval);\r\n            // Remove the last loading message\r\n            const loadingElements = document.querySelectorAll('.loading-message');\r\n            loadingElements.forEach(el => terminalOutput.removeChild(el));\r\n            if (callback) callback();\r\n        }, duration);\r\n    }\r\n    \r\n    // Function to simulate hacking animation\r\n    function simulateHacking(callback) {\r\n        const chars = \"01█▓▒░/\\\\|_-+=\";\r\n        const originalText = terminalOutput.textContent;\r\n        \r\n        let iterations = 0;\r\n        const interval = setInterval(() => {\r\n            terminalOutput.textContent = terminalOutput.textContent.split('')\r\n                .map((char, index) => {\r\n                    if (index < iterations || char === '\\n') return char;\r\n                    if (Math.random() < 0.1) return chars.charAt(Math.floor(Math.random() * chars.length));\r\n                    return char;\r\n                }).join('');\r\n            \r\n            iterations += 3;\r\n            \r\n            if (iterations > originalText.length * 1.5) {\r\n                clearInterval(interval);\r\n                terminalOutput.textContent = originalText;\r\n                if (callback) callback();\r\n            }\r\n        }, 50);\r\n    }\r\n    \r\n    // Function to process commands\r\n    function processCommand(command) {\r\n        if (!command.trim()) return;\r\n        \r\n        addTerminalLine(command, 'command text-gray-300');\r\n        \r\n        const cmd = command.trim().toLowerCase();\r\n        \r\n        if (cmd === 'help') {\r\n            helpText.forEach(line => addTerminalLine(line));\r\n        } \r\n        else if (cmd === 'clear') {\r\n            terminalOutput.innerHTML = '';\r\n        }\r\n        else if (cmd === 'about' || cmd === 'skills' || cmd === 'projects' || cmd === 'contact' || cmd === 'system') {\r\n            // Simulate secure database access\r\n            simulateLoading(1500, () => {\r\n                portfolioData[cmd].forEach(line => addTerminalLine(line));\r\n            });\r\n        }\r\n        else if (cmd === 'sudo') {\r\n            simulateHacking(() => {\r\n                addTerminalLine(\"<span class='text-red-400'>[!] UNAUTHORIZED: Insufficient clearance level detected</span>\");\r\n                addTerminalLine(\"<span class='text-red-400'>[!] This incident has been reported</span>\");\r\n            });\r\n        }\r\n        else if (cmd === 'secret') {\r\n            addTerminalLine(\"<span class='text-red-400'>Initiating security protocol...</span>\", '', 0);\r\n            simulateHacking(() => {\r\n                portfolioData.secret.forEach(line => addTerminalLine(line));\r\n                setTimeout(() => {\r\n                    terminalOutput.innerHTML = '';\r\n                    addTerminalLine(\"<span class='text-green-400'>System rebooted. Credentials cleared.</span>\");\r\n                    addTerminalLine(\"<span class='text-cyan-300'>Enter 'help' for available commands</span>\");\r\n                }, 3000);\r\n            });\r\n        }\r\n        else if (cmd === 'login') {\r\n            if (!accessGranted) {\r\n                simulatePasswordPrompt();\r\n            } else {\r\n                addTerminalLine(\"<span class='text-yellow-300'>Already authenticated as root</span>\");\r\n            }\r\n        }\r\n        else {\r\n            addTerminalLine(`<span class='text-red-400'>Command not recognized: ${cmd}</span>. Type 'help' for available commands.`);\r\n        }\r\n    }\r\n    \r\n    // Simulate password prompt\r\n    function simulatePasswordPrompt() {\r\n        terminalInput.type = \"password\";\r\n        terminalInput.className += \" password-input\";\r\n        terminalInput.placeholder = \"[password required]\";\r\n        \r\n        const checkPassword = (e) => {\r\n            if (e.key === 'Enter') {\r\n                terminalInput.type = \"text\";\r\n                terminalInput.classList.remove(\"password-input\");\r\n                terminalInput.placeholder = \"\";\r\n                \r\n                simulateLoading(2000, () => {\r\n                    if (authAttempts > 2) {\r\n                        addTerminalLine(\"<span class='text-red-400'>[!] TOO MANY ATTEMPTS. LOCKDOWN INITIATED.</span>\");\r\n                        portfolioData.secret.forEach(line => addTerminalLine(line));\r\n                        setTimeout(() => {\r\n                            terminalOutput.innerHTML = '';\r\n                            addTerminalLine(\"<span class='text-yellow-300'>System locked. Refresh to try again.</span>\");\r\n                            terminalInput.disabled = true;\r\n                        }, 3000);\r\n                    } else {\r\n                        authAttempts++;\r\n                        addTerminalLine(\"<span class='text-red-400'>[!] AUTHENTICATION FAILED</span>\");\r\n                        addTerminalLine(\"<span class='text-yellow-300'>Hint: Try 'cyberninja'</span>\");\r\n                        terminalInput.value = '';\r\n                        terminalInput.removeEventListener('keydown', checkPassword);\r\n                        terminalInput.addEventListener('keydown', handleInput);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        \r\n        terminalInput.removeEventListener('keydown', handleInput);\r\n        terminalInput.addEventListener('keydown', checkPassword);\r\n        terminalInput.focus();\r\n    }\r\n    \r\n    // Handle normal input\r\n    function handleInput(e) {\r\n        if (e.key === 'Enter') {\r\n            processCommand(terminalInput.value);\r\n            terminalInput.value = '';\r\n            e.preventDefault();\r\n        } else if (e.key === 'Tab') {\r\n            e.preventDefault();\r\n            const cmd = terminalInput.value.trim().toLowerCase();\r\n            const availableCommands = ['help', 'about', 'skills', 'projects', 'contact', 'clear', 'system', 'sudo', 'login'];\r\n            \r\n            const matches = availableCommands.filter(c => c.startsWith(cmd));\r\n            if (matches.length === 1) {\r\n                terminalInput.value = matches[0];\r\n            } else if (matches.length > 1) {\r\n                addTerminalLine(\"<span class='text-cyan-300'>Possible commands:</span> \" + matches.join(', '));\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Initialize\r\n    terminalInput.addEventListener('keydown', handleInput);\r\n    createMatrixRain();\r\n    updateDateTime();\r\n    \r\n    // Initial system boot message\r\n    setTimeout(() => {\r\n        addTerminalLine(\" \", 'text-gray-400');\r\n        helpText.forEach(line => addTerminalLine(line));\r\n    }, 800);\r\n    \r\n    // Focus input on page load\r\n    terminalInput.focus();\r\n    \r\n    // Easter egg - cursor over password prompt\r\n    terminalInput.addEventListener('mouseover', () => {\r\n        if (!accessGranted && Math.random() > 0.7) {\r\n            const tip = document.createElement('div');\r\n            tip.className = 'text-xs text-gray-400';\r\n            tip.textContent = \"Hint: The password is 'cyberninja'\";\r\n            terminalOutput.appendChild(tip);\r\n            terminalOutput.scrollTop = terminalOutput.scrollHeight;\r\n        }\r\n    });\r\n});\r\n"
        }
    ]
}